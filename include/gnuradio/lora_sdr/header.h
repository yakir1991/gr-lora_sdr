/* -*- c++ -*- */  // File is written in C++ and follows GNU Radio coding conventions.
/*  // Begin the original license comment block preserved from upstream.
 * Copyright 2022 Tapparel Joachim @EPFL,TCL.
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */


#ifndef INCLUDED_LORA_SDR_HEADER_H  // Protect against multiple inclusion of the public header block declaration.
#define INCLUDED_LORA_SDR_HEADER_H  // Define the include guard macro so later includes can skip the body.

#include <gnuradio/lora_sdr/api.h>  // Import symbol visibility macros for the LoRa SDR module.
#include <gnuradio/block.h>  // Include the GNU Radio base class for synchronous/asynchronous blocks.

namespace gr {  // Begin the GNU Radio namespace scope.
  namespace lora_sdr {  // Enter the LoRa SDR namespace containing all custom LoRa components.

    /*!  // Doxygen block documenting the purpose of the class.
     * \brief <+description of block+>  // Placeholder summary generated by gr_modtool when the block was created.
     * \ingroup lora_sdr  // Tag the block as part of the LoRa SDR module documentation group.
     *
     */
    class LORA_SDR_API header : virtual public gr::block  // Declare the abstract interface for the LoRa header formatter block.
    {
     public:
      typedef std::shared_ptr<header> sptr;  // Provide a convenient alias for shared pointer references to the block.

      virtual void set_cr(uint8_t cr)=0;  // Require derived implementations to expose a setter for the coding rate.
      virtual uint8_t get_cr()=0;  // Require derived classes to provide a getter returning the active coding rate.

      /*!  // Document the factory helper exposed to client code.
       * \brief Return a shared_ptr to a new instance of lora_sdr::header.  // Explain that make() constructs a new block instance.
       *
       * To avoid accidental use of raw pointers, lora_sdr::header's  // Note that the constructor is hidden to encourage smart-pointer use.
       * constructor is in a private implementation  // Continue the explanation referencing the private implementation idiom.
       * class. lora_sdr::header::make is the public interface for  // Clarify that make() is the public creation entry point.
       * creating new instances.  // Conclude the comment about instance creation.
       */
      static sptr make(bool impl_head, bool has_crc, uint8_t cr);  // Declare the static factory for building header implementations with runtime options.
    };

  } // namespace lora_sdr  // Close the inner namespace scope for LoRa SDR classes.
} // namespace gr  // Close the outer GNU Radio namespace.

#endif /* INCLUDED_LORA_SDR_HEADER_H */  // Terminate the include guard for this public header file.

